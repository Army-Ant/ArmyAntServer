// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArmyAntMessage/DBProxy/SqlRequest.proto

#ifndef PROTOBUF_INCLUDED_ArmyAntMessage_2fDBProxy_2fSqlRequest_2eproto
#define PROTOBUF_INCLUDED_ArmyAntMessage_2fDBProxy_2fSqlRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/stubs/common.h>
#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ArmyAntMessage_2fDBProxy_2fSqlRequest_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ArmyAntMessage_2fDBProxy_2fSqlRequest_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ArmyAntMessage_2fDBProxy_2fSqlRequest_2eproto();
namespace ArmyAntMessage {
namespace DBProxy {
class Any2Dbp_SqlRequest;
class Any2Dbp_SqlRequestDefaultTypeInternal;
extern Any2Dbp_SqlRequestDefaultTypeInternal _Any2Dbp_SqlRequest_default_instance_;
class SqlDatabaseInfo;
class SqlDatabaseInfoDefaultTypeInternal;
extern SqlDatabaseInfoDefaultTypeInternal _SqlDatabaseInfo_default_instance_;
class SqlHeadOne;
class SqlHeadOneDefaultTypeInternal;
extern SqlHeadOneDefaultTypeInternal _SqlHeadOne_default_instance_;
class SqlResult;
class SqlResultDefaultTypeInternal;
extern SqlResultDefaultTypeInternal _SqlResult_default_instance_;
class SqlRow;
class SqlRowDefaultTypeInternal;
extern SqlRowDefaultTypeInternal _SqlRow_default_instance_;
class SqlTableInfo;
class SqlTableInfoDefaultTypeInternal;
extern SqlTableInfoDefaultTypeInternal _SqlTableInfo_default_instance_;
}  // namespace DBProxy
}  // namespace ArmyAntMessage
namespace google {
namespace protobuf {
template<> ::ArmyAntMessage::DBProxy::Any2Dbp_SqlRequest* Arena::CreateMaybeMessage<::ArmyAntMessage::DBProxy::Any2Dbp_SqlRequest>(Arena*);
template<> ::ArmyAntMessage::DBProxy::SqlDatabaseInfo* Arena::CreateMaybeMessage<::ArmyAntMessage::DBProxy::SqlDatabaseInfo>(Arena*);
template<> ::ArmyAntMessage::DBProxy::SqlHeadOne* Arena::CreateMaybeMessage<::ArmyAntMessage::DBProxy::SqlHeadOne>(Arena*);
template<> ::ArmyAntMessage::DBProxy::SqlResult* Arena::CreateMaybeMessage<::ArmyAntMessage::DBProxy::SqlResult>(Arena*);
template<> ::ArmyAntMessage::DBProxy::SqlRow* Arena::CreateMaybeMessage<::ArmyAntMessage::DBProxy::SqlRow>(Arena*);
template<> ::ArmyAntMessage::DBProxy::SqlTableInfo* Arena::CreateMaybeMessage<::ArmyAntMessage::DBProxy::SqlTableInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ArmyAntMessage {
namespace DBProxy {

// ===================================================================

class SqlHeadOne : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ArmyAntMessage.DBProxy.SqlHeadOne) */ {
 public:
  SqlHeadOne();
  virtual ~SqlHeadOne();

  SqlHeadOne(const SqlHeadOne& from);

  inline SqlHeadOne& operator=(const SqlHeadOne& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SqlHeadOne(SqlHeadOne&& from) noexcept
    : SqlHeadOne() {
    *this = ::std::move(from);
  }

  inline SqlHeadOne& operator=(SqlHeadOne&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SqlHeadOne& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SqlHeadOne* internal_default_instance() {
    return reinterpret_cast<const SqlHeadOne*>(
               &_SqlHeadOne_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SqlHeadOne* other);
  friend void swap(SqlHeadOne& a, SqlHeadOne& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SqlHeadOne* New() const final {
    return CreateMaybeMessage<SqlHeadOne>(NULL);
  }

  SqlHeadOne* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SqlHeadOne>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SqlHeadOne& from);
  void MergeFrom(const SqlHeadOne& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SqlHeadOne* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string catalogName = 2;
  void clear_catalogname();
  static const int kCatalogNameFieldNumber = 2;
  const ::std::string& catalogname() const;
  void set_catalogname(const ::std::string& value);
  #if LANG_CXX11
  void set_catalogname(::std::string&& value);
  #endif
  void set_catalogname(const char* value);
  void set_catalogname(const char* value, size_t size);
  ::std::string* mutable_catalogname();
  ::std::string* release_catalogname();
  void set_allocated_catalogname(::std::string* catalogname);

  // string columnName = 3;
  void clear_columnname();
  static const int kColumnNameFieldNumber = 3;
  const ::std::string& columnname() const;
  void set_columnname(const ::std::string& value);
  #if LANG_CXX11
  void set_columnname(::std::string&& value);
  #endif
  void set_columnname(const char* value);
  void set_columnname(const char* value, size_t size);
  ::std::string* mutable_columnname();
  ::std::string* release_columnname();
  void set_allocated_columnname(::std::string* columnname);

  // int32 length = 1;
  void clear_length();
  static const int kLengthFieldNumber = 1;
  ::google::protobuf::int32 length() const;
  void set_length(::google::protobuf::int32 value);

  // int32 type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // bool allowNumm = 5;
  void clear_allownumm();
  static const int kAllowNummFieldNumber = 5;
  bool allownumm() const;
  void set_allownumm(bool value);

  // bool autoIncrease = 6;
  void clear_autoincrease();
  static const int kAutoIncreaseFieldNumber = 6;
  bool autoincrease() const;
  void set_autoincrease(bool value);

  // @@protoc_insertion_point(class_scope:ArmyAntMessage.DBProxy.SqlHeadOne)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr catalogname_;
  ::google::protobuf::internal::ArenaStringPtr columnname_;
  ::google::protobuf::int32 length_;
  ::google::protobuf::int32 type_;
  bool allownumm_;
  bool autoincrease_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ArmyAntMessage_2fDBProxy_2fSqlRequest_2eproto;
};
// -------------------------------------------------------------------

class SqlRow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ArmyAntMessage.DBProxy.SqlRow) */ {
 public:
  SqlRow();
  virtual ~SqlRow();

  SqlRow(const SqlRow& from);

  inline SqlRow& operator=(const SqlRow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SqlRow(SqlRow&& from) noexcept
    : SqlRow() {
    *this = ::std::move(from);
  }

  inline SqlRow& operator=(SqlRow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SqlRow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SqlRow* internal_default_instance() {
    return reinterpret_cast<const SqlRow*>(
               &_SqlRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SqlRow* other);
  friend void swap(SqlRow& a, SqlRow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SqlRow* New() const final {
    return CreateMaybeMessage<SqlRow>(NULL);
  }

  SqlRow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SqlRow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SqlRow& from);
  void MergeFrom(const SqlRow& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SqlRow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string fields = 1;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 1;
  const ::std::string& fields(int index) const;
  ::std::string* mutable_fields(int index);
  void set_fields(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_fields(int index, ::std::string&& value);
  #endif
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  ::std::string* add_fields();
  void add_fields(const ::std::string& value);
  #if LANG_CXX11
  void add_fields(::std::string&& value);
  #endif
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& fields() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_fields();

  // @@protoc_insertion_point(class_scope:ArmyAntMessage.DBProxy.SqlRow)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> fields_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ArmyAntMessage_2fDBProxy_2fSqlRequest_2eproto;
};
// -------------------------------------------------------------------

class SqlDatabaseInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ArmyAntMessage.DBProxy.SqlDatabaseInfo) */ {
 public:
  SqlDatabaseInfo();
  virtual ~SqlDatabaseInfo();

  SqlDatabaseInfo(const SqlDatabaseInfo& from);

  inline SqlDatabaseInfo& operator=(const SqlDatabaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SqlDatabaseInfo(SqlDatabaseInfo&& from) noexcept
    : SqlDatabaseInfo() {
    *this = ::std::move(from);
  }

  inline SqlDatabaseInfo& operator=(SqlDatabaseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SqlDatabaseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SqlDatabaseInfo* internal_default_instance() {
    return reinterpret_cast<const SqlDatabaseInfo*>(
               &_SqlDatabaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SqlDatabaseInfo* other);
  friend void swap(SqlDatabaseInfo& a, SqlDatabaseInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SqlDatabaseInfo* New() const final {
    return CreateMaybeMessage<SqlDatabaseInfo>(NULL);
  }

  SqlDatabaseInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SqlDatabaseInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SqlDatabaseInfo& from);
  void MergeFrom(const SqlDatabaseInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SqlDatabaseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string server = 2;
  void clear_server();
  static const int kServerFieldNumber = 2;
  const ::std::string& server() const;
  void set_server(const ::std::string& value);
  #if LANG_CXX11
  void set_server(::std::string&& value);
  #endif
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  ::std::string* mutable_server();
  ::std::string* release_server();
  void set_allocated_server(::std::string* server);

  // string charset = 3;
  void clear_charset();
  static const int kCharsetFieldNumber = 3;
  const ::std::string& charset() const;
  void set_charset(const ::std::string& value);
  #if LANG_CXX11
  void set_charset(::std::string&& value);
  #endif
  void set_charset(const char* value);
  void set_charset(const char* value, size_t size);
  ::std::string* mutable_charset();
  ::std::string* release_charset();
  void set_allocated_charset(::std::string* charset);

  // string sortRule = 4;
  void clear_sortrule();
  static const int kSortRuleFieldNumber = 4;
  const ::std::string& sortrule() const;
  void set_sortrule(const ::std::string& value);
  #if LANG_CXX11
  void set_sortrule(::std::string&& value);
  #endif
  void set_sortrule(const char* value);
  void set_sortrule(const char* value, size_t size);
  ::std::string* mutable_sortrule();
  ::std::string* release_sortrule();
  void set_allocated_sortrule(::std::string* sortrule);

  // @@protoc_insertion_point(class_scope:ArmyAntMessage.DBProxy.SqlDatabaseInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr server_;
  ::google::protobuf::internal::ArenaStringPtr charset_;
  ::google::protobuf::internal::ArenaStringPtr sortrule_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ArmyAntMessage_2fDBProxy_2fSqlRequest_2eproto;
};
// -------------------------------------------------------------------

class SqlTableInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ArmyAntMessage.DBProxy.SqlTableInfo) */ {
 public:
  SqlTableInfo();
  virtual ~SqlTableInfo();

  SqlTableInfo(const SqlTableInfo& from);

  inline SqlTableInfo& operator=(const SqlTableInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SqlTableInfo(SqlTableInfo&& from) noexcept
    : SqlTableInfo() {
    *this = ::std::move(from);
  }

  inline SqlTableInfo& operator=(SqlTableInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SqlTableInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SqlTableInfo* internal_default_instance() {
    return reinterpret_cast<const SqlTableInfo*>(
               &_SqlTableInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SqlTableInfo* other);
  friend void swap(SqlTableInfo& a, SqlTableInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SqlTableInfo* New() const final {
    return CreateMaybeMessage<SqlTableInfo>(NULL);
  }

  SqlTableInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SqlTableInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SqlTableInfo& from);
  void MergeFrom(const SqlTableInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SqlTableInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tableName = 5;
  void clear_tablename();
  static const int kTableNameFieldNumber = 5;
  const ::std::string& tablename() const;
  void set_tablename(const ::std::string& value);
  #if LANG_CXX11
  void set_tablename(::std::string&& value);
  #endif
  void set_tablename(const char* value);
  void set_tablename(const char* value, size_t size);
  ::std::string* mutable_tablename();
  ::std::string* release_tablename();
  void set_allocated_tablename(::std::string* tablename);

  // string engine = 6;
  void clear_engine();
  static const int kEngineFieldNumber = 6;
  const ::std::string& engine() const;
  void set_engine(const ::std::string& value);
  #if LANG_CXX11
  void set_engine(::std::string&& value);
  #endif
  void set_engine(const char* value);
  void set_engine(const char* value, size_t size);
  ::std::string* mutable_engine();
  ::std::string* release_engine();
  void set_allocated_engine(::std::string* engine);

  // string comment = 7;
  void clear_comment();
  static const int kCommentFieldNumber = 7;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // .ArmyAntMessage.DBProxy.SqlDatabaseInfo database = 8;
  bool has_database() const;
  void clear_database();
  static const int kDatabaseFieldNumber = 8;
  const ::ArmyAntMessage::DBProxy::SqlDatabaseInfo& database() const;
  ::ArmyAntMessage::DBProxy::SqlDatabaseInfo* release_database();
  ::ArmyAntMessage::DBProxy::SqlDatabaseInfo* mutable_database();
  void set_allocated_database(::ArmyAntMessage::DBProxy::SqlDatabaseInfo* database);

  // @@protoc_insertion_point(class_scope:ArmyAntMessage.DBProxy.SqlTableInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tablename_;
  ::google::protobuf::internal::ArenaStringPtr engine_;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::ArmyAntMessage::DBProxy::SqlDatabaseInfo* database_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ArmyAntMessage_2fDBProxy_2fSqlRequest_2eproto;
};
// -------------------------------------------------------------------

class SqlResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ArmyAntMessage.DBProxy.SqlResult) */ {
 public:
  SqlResult();
  virtual ~SqlResult();

  SqlResult(const SqlResult& from);

  inline SqlResult& operator=(const SqlResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SqlResult(SqlResult&& from) noexcept
    : SqlResult() {
    *this = ::std::move(from);
  }

  inline SqlResult& operator=(SqlResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SqlResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SqlResult* internal_default_instance() {
    return reinterpret_cast<const SqlResult*>(
               &_SqlResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SqlResult* other);
  friend void swap(SqlResult& a, SqlResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SqlResult* New() const final {
    return CreateMaybeMessage<SqlResult>(NULL);
  }

  SqlResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SqlResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SqlResult& from);
  void MergeFrom(const SqlResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SqlResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ArmyAntMessage.DBProxy.SqlHeadOne heads = 2;
  int heads_size() const;
  void clear_heads();
  static const int kHeadsFieldNumber = 2;
  ::ArmyAntMessage::DBProxy::SqlHeadOne* mutable_heads(int index);
  ::google::protobuf::RepeatedPtrField< ::ArmyAntMessage::DBProxy::SqlHeadOne >*
      mutable_heads();
  const ::ArmyAntMessage::DBProxy::SqlHeadOne& heads(int index) const;
  ::ArmyAntMessage::DBProxy::SqlHeadOne* add_heads();
  const ::google::protobuf::RepeatedPtrField< ::ArmyAntMessage::DBProxy::SqlHeadOne >&
      heads() const;

  // repeated .ArmyAntMessage.DBProxy.SqlRow rows = 3;
  int rows_size() const;
  void clear_rows();
  static const int kRowsFieldNumber = 3;
  ::ArmyAntMessage::DBProxy::SqlRow* mutable_rows(int index);
  ::google::protobuf::RepeatedPtrField< ::ArmyAntMessage::DBProxy::SqlRow >*
      mutable_rows();
  const ::ArmyAntMessage::DBProxy::SqlRow& rows(int index) const;
  ::ArmyAntMessage::DBProxy::SqlRow* add_rows();
  const ::google::protobuf::RepeatedPtrField< ::ArmyAntMessage::DBProxy::SqlRow >&
      rows() const;

  // .ArmyAntMessage.DBProxy.SqlTableInfo table = 1;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::ArmyAntMessage::DBProxy::SqlTableInfo& table() const;
  ::ArmyAntMessage::DBProxy::SqlTableInfo* release_table();
  ::ArmyAntMessage::DBProxy::SqlTableInfo* mutable_table();
  void set_allocated_table(::ArmyAntMessage::DBProxy::SqlTableInfo* table);

  // @@protoc_insertion_point(class_scope:ArmyAntMessage.DBProxy.SqlResult)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ArmyAntMessage::DBProxy::SqlHeadOne > heads_;
  ::google::protobuf::RepeatedPtrField< ::ArmyAntMessage::DBProxy::SqlRow > rows_;
  ::ArmyAntMessage::DBProxy::SqlTableInfo* table_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ArmyAntMessage_2fDBProxy_2fSqlRequest_2eproto;
};
// -------------------------------------------------------------------

class Any2Dbp_SqlRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ArmyAntMessage.DBProxy.Any2Dbp_SqlRequest) */ {
 public:
  Any2Dbp_SqlRequest();
  virtual ~Any2Dbp_SqlRequest();

  Any2Dbp_SqlRequest(const Any2Dbp_SqlRequest& from);

  inline Any2Dbp_SqlRequest& operator=(const Any2Dbp_SqlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Any2Dbp_SqlRequest(Any2Dbp_SqlRequest&& from) noexcept
    : Any2Dbp_SqlRequest() {
    *this = ::std::move(from);
  }

  inline Any2Dbp_SqlRequest& operator=(Any2Dbp_SqlRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Any2Dbp_SqlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Any2Dbp_SqlRequest* internal_default_instance() {
    return reinterpret_cast<const Any2Dbp_SqlRequest*>(
               &_Any2Dbp_SqlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Any2Dbp_SqlRequest* other);
  friend void swap(Any2Dbp_SqlRequest& a, Any2Dbp_SqlRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Any2Dbp_SqlRequest* New() const final {
    return CreateMaybeMessage<Any2Dbp_SqlRequest>(NULL);
  }

  Any2Dbp_SqlRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Any2Dbp_SqlRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Any2Dbp_SqlRequest& from);
  void MergeFrom(const Any2Dbp_SqlRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Any2Dbp_SqlRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tableName = 2;
  void clear_tablename();
  static const int kTableNameFieldNumber = 2;
  const ::std::string& tablename() const;
  void set_tablename(const ::std::string& value);
  #if LANG_CXX11
  void set_tablename(::std::string&& value);
  #endif
  void set_tablename(const char* value);
  void set_tablename(const char* value, size_t size);
  ::std::string* mutable_tablename();
  ::std::string* release_tablename();
  void set_allocated_tablename(::std::string* tablename);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ArmyAntMessage.DBProxy.Any2Dbp_SqlRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tablename_;
  ::google::protobuf::int32 type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ArmyAntMessage_2fDBProxy_2fSqlRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SqlHeadOne

// int32 length = 1;
inline void SqlHeadOne::clear_length() {
  length_ = 0;
}
inline ::google::protobuf::int32 SqlHeadOne::length() const {
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.SqlHeadOne.length)
  return length_;
}
inline void SqlHeadOne::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:ArmyAntMessage.DBProxy.SqlHeadOne.length)
}

// string catalogName = 2;
inline void SqlHeadOne::clear_catalogname() {
  catalogname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SqlHeadOne::catalogname() const {
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.SqlHeadOne.catalogName)
  return catalogname_.GetNoArena();
}
inline void SqlHeadOne::set_catalogname(const ::std::string& value) {
  
  catalogname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArmyAntMessage.DBProxy.SqlHeadOne.catalogName)
}
#if LANG_CXX11
inline void SqlHeadOne::set_catalogname(::std::string&& value) {
  
  catalogname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArmyAntMessage.DBProxy.SqlHeadOne.catalogName)
}
#endif
inline void SqlHeadOne::set_catalogname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  catalogname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArmyAntMessage.DBProxy.SqlHeadOne.catalogName)
}
inline void SqlHeadOne::set_catalogname(const char* value, size_t size) {
  
  catalogname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArmyAntMessage.DBProxy.SqlHeadOne.catalogName)
}
inline ::std::string* SqlHeadOne::mutable_catalogname() {
  
  // @@protoc_insertion_point(field_mutable:ArmyAntMessage.DBProxy.SqlHeadOne.catalogName)
  return catalogname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqlHeadOne::release_catalogname() {
  // @@protoc_insertion_point(field_release:ArmyAntMessage.DBProxy.SqlHeadOne.catalogName)
  
  return catalogname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqlHeadOne::set_allocated_catalogname(::std::string* catalogname) {
  if (catalogname != NULL) {
    
  } else {
    
  }
  catalogname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), catalogname);
  // @@protoc_insertion_point(field_set_allocated:ArmyAntMessage.DBProxy.SqlHeadOne.catalogName)
}

// string columnName = 3;
inline void SqlHeadOne::clear_columnname() {
  columnname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SqlHeadOne::columnname() const {
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.SqlHeadOne.columnName)
  return columnname_.GetNoArena();
}
inline void SqlHeadOne::set_columnname(const ::std::string& value) {
  
  columnname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArmyAntMessage.DBProxy.SqlHeadOne.columnName)
}
#if LANG_CXX11
inline void SqlHeadOne::set_columnname(::std::string&& value) {
  
  columnname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArmyAntMessage.DBProxy.SqlHeadOne.columnName)
}
#endif
inline void SqlHeadOne::set_columnname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  columnname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArmyAntMessage.DBProxy.SqlHeadOne.columnName)
}
inline void SqlHeadOne::set_columnname(const char* value, size_t size) {
  
  columnname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArmyAntMessage.DBProxy.SqlHeadOne.columnName)
}
inline ::std::string* SqlHeadOne::mutable_columnname() {
  
  // @@protoc_insertion_point(field_mutable:ArmyAntMessage.DBProxy.SqlHeadOne.columnName)
  return columnname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqlHeadOne::release_columnname() {
  // @@protoc_insertion_point(field_release:ArmyAntMessage.DBProxy.SqlHeadOne.columnName)
  
  return columnname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqlHeadOne::set_allocated_columnname(::std::string* columnname) {
  if (columnname != NULL) {
    
  } else {
    
  }
  columnname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), columnname);
  // @@protoc_insertion_point(field_set_allocated:ArmyAntMessage.DBProxy.SqlHeadOne.columnName)
}

// int32 type = 4;
inline void SqlHeadOne::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 SqlHeadOne::type() const {
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.SqlHeadOne.type)
  return type_;
}
inline void SqlHeadOne::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ArmyAntMessage.DBProxy.SqlHeadOne.type)
}

// bool allowNumm = 5;
inline void SqlHeadOne::clear_allownumm() {
  allownumm_ = false;
}
inline bool SqlHeadOne::allownumm() const {
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.SqlHeadOne.allowNumm)
  return allownumm_;
}
inline void SqlHeadOne::set_allownumm(bool value) {
  
  allownumm_ = value;
  // @@protoc_insertion_point(field_set:ArmyAntMessage.DBProxy.SqlHeadOne.allowNumm)
}

// bool autoIncrease = 6;
inline void SqlHeadOne::clear_autoincrease() {
  autoincrease_ = false;
}
inline bool SqlHeadOne::autoincrease() const {
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.SqlHeadOne.autoIncrease)
  return autoincrease_;
}
inline void SqlHeadOne::set_autoincrease(bool value) {
  
  autoincrease_ = value;
  // @@protoc_insertion_point(field_set:ArmyAntMessage.DBProxy.SqlHeadOne.autoIncrease)
}

// -------------------------------------------------------------------

// SqlRow

// repeated string fields = 1;
inline int SqlRow::fields_size() const {
  return fields_.size();
}
inline void SqlRow::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& SqlRow::fields(int index) const {
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.SqlRow.fields)
  return fields_.Get(index);
}
inline ::std::string* SqlRow::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:ArmyAntMessage.DBProxy.SqlRow.fields)
  return fields_.Mutable(index);
}
inline void SqlRow::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ArmyAntMessage.DBProxy.SqlRow.fields)
  fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SqlRow::set_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ArmyAntMessage.DBProxy.SqlRow.fields)
  fields_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SqlRow::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ArmyAntMessage.DBProxy.SqlRow.fields)
}
inline void SqlRow::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ArmyAntMessage.DBProxy.SqlRow.fields)
}
inline ::std::string* SqlRow::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:ArmyAntMessage.DBProxy.SqlRow.fields)
  return fields_.Add();
}
inline void SqlRow::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ArmyAntMessage.DBProxy.SqlRow.fields)
}
#if LANG_CXX11
inline void SqlRow::add_fields(::std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ArmyAntMessage.DBProxy.SqlRow.fields)
}
#endif
inline void SqlRow::add_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ArmyAntMessage.DBProxy.SqlRow.fields)
}
inline void SqlRow::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ArmyAntMessage.DBProxy.SqlRow.fields)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
SqlRow::fields() const {
  // @@protoc_insertion_point(field_list:ArmyAntMessage.DBProxy.SqlRow.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
SqlRow::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:ArmyAntMessage.DBProxy.SqlRow.fields)
  return &fields_;
}

// -------------------------------------------------------------------

// SqlDatabaseInfo

// string name = 1;
inline void SqlDatabaseInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SqlDatabaseInfo::name() const {
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.SqlDatabaseInfo.name)
  return name_.GetNoArena();
}
inline void SqlDatabaseInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArmyAntMessage.DBProxy.SqlDatabaseInfo.name)
}
#if LANG_CXX11
inline void SqlDatabaseInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArmyAntMessage.DBProxy.SqlDatabaseInfo.name)
}
#endif
inline void SqlDatabaseInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArmyAntMessage.DBProxy.SqlDatabaseInfo.name)
}
inline void SqlDatabaseInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArmyAntMessage.DBProxy.SqlDatabaseInfo.name)
}
inline ::std::string* SqlDatabaseInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ArmyAntMessage.DBProxy.SqlDatabaseInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqlDatabaseInfo::release_name() {
  // @@protoc_insertion_point(field_release:ArmyAntMessage.DBProxy.SqlDatabaseInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqlDatabaseInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ArmyAntMessage.DBProxy.SqlDatabaseInfo.name)
}

// string server = 2;
inline void SqlDatabaseInfo::clear_server() {
  server_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SqlDatabaseInfo::server() const {
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.SqlDatabaseInfo.server)
  return server_.GetNoArena();
}
inline void SqlDatabaseInfo::set_server(const ::std::string& value) {
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArmyAntMessage.DBProxy.SqlDatabaseInfo.server)
}
#if LANG_CXX11
inline void SqlDatabaseInfo::set_server(::std::string&& value) {
  
  server_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArmyAntMessage.DBProxy.SqlDatabaseInfo.server)
}
#endif
inline void SqlDatabaseInfo::set_server(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArmyAntMessage.DBProxy.SqlDatabaseInfo.server)
}
inline void SqlDatabaseInfo::set_server(const char* value, size_t size) {
  
  server_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArmyAntMessage.DBProxy.SqlDatabaseInfo.server)
}
inline ::std::string* SqlDatabaseInfo::mutable_server() {
  
  // @@protoc_insertion_point(field_mutable:ArmyAntMessage.DBProxy.SqlDatabaseInfo.server)
  return server_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqlDatabaseInfo::release_server() {
  // @@protoc_insertion_point(field_release:ArmyAntMessage.DBProxy.SqlDatabaseInfo.server)
  
  return server_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqlDatabaseInfo::set_allocated_server(::std::string* server) {
  if (server != NULL) {
    
  } else {
    
  }
  server_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server);
  // @@protoc_insertion_point(field_set_allocated:ArmyAntMessage.DBProxy.SqlDatabaseInfo.server)
}

// string charset = 3;
inline void SqlDatabaseInfo::clear_charset() {
  charset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SqlDatabaseInfo::charset() const {
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.SqlDatabaseInfo.charset)
  return charset_.GetNoArena();
}
inline void SqlDatabaseInfo::set_charset(const ::std::string& value) {
  
  charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArmyAntMessage.DBProxy.SqlDatabaseInfo.charset)
}
#if LANG_CXX11
inline void SqlDatabaseInfo::set_charset(::std::string&& value) {
  
  charset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArmyAntMessage.DBProxy.SqlDatabaseInfo.charset)
}
#endif
inline void SqlDatabaseInfo::set_charset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArmyAntMessage.DBProxy.SqlDatabaseInfo.charset)
}
inline void SqlDatabaseInfo::set_charset(const char* value, size_t size) {
  
  charset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArmyAntMessage.DBProxy.SqlDatabaseInfo.charset)
}
inline ::std::string* SqlDatabaseInfo::mutable_charset() {
  
  // @@protoc_insertion_point(field_mutable:ArmyAntMessage.DBProxy.SqlDatabaseInfo.charset)
  return charset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqlDatabaseInfo::release_charset() {
  // @@protoc_insertion_point(field_release:ArmyAntMessage.DBProxy.SqlDatabaseInfo.charset)
  
  return charset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqlDatabaseInfo::set_allocated_charset(::std::string* charset) {
  if (charset != NULL) {
    
  } else {
    
  }
  charset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), charset);
  // @@protoc_insertion_point(field_set_allocated:ArmyAntMessage.DBProxy.SqlDatabaseInfo.charset)
}

// string sortRule = 4;
inline void SqlDatabaseInfo::clear_sortrule() {
  sortrule_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SqlDatabaseInfo::sortrule() const {
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.SqlDatabaseInfo.sortRule)
  return sortrule_.GetNoArena();
}
inline void SqlDatabaseInfo::set_sortrule(const ::std::string& value) {
  
  sortrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArmyAntMessage.DBProxy.SqlDatabaseInfo.sortRule)
}
#if LANG_CXX11
inline void SqlDatabaseInfo::set_sortrule(::std::string&& value) {
  
  sortrule_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArmyAntMessage.DBProxy.SqlDatabaseInfo.sortRule)
}
#endif
inline void SqlDatabaseInfo::set_sortrule(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sortrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArmyAntMessage.DBProxy.SqlDatabaseInfo.sortRule)
}
inline void SqlDatabaseInfo::set_sortrule(const char* value, size_t size) {
  
  sortrule_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArmyAntMessage.DBProxy.SqlDatabaseInfo.sortRule)
}
inline ::std::string* SqlDatabaseInfo::mutable_sortrule() {
  
  // @@protoc_insertion_point(field_mutable:ArmyAntMessage.DBProxy.SqlDatabaseInfo.sortRule)
  return sortrule_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqlDatabaseInfo::release_sortrule() {
  // @@protoc_insertion_point(field_release:ArmyAntMessage.DBProxy.SqlDatabaseInfo.sortRule)
  
  return sortrule_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqlDatabaseInfo::set_allocated_sortrule(::std::string* sortrule) {
  if (sortrule != NULL) {
    
  } else {
    
  }
  sortrule_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sortrule);
  // @@protoc_insertion_point(field_set_allocated:ArmyAntMessage.DBProxy.SqlDatabaseInfo.sortRule)
}

// -------------------------------------------------------------------

// SqlTableInfo

// string tableName = 5;
inline void SqlTableInfo::clear_tablename() {
  tablename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SqlTableInfo::tablename() const {
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.SqlTableInfo.tableName)
  return tablename_.GetNoArena();
}
inline void SqlTableInfo::set_tablename(const ::std::string& value) {
  
  tablename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArmyAntMessage.DBProxy.SqlTableInfo.tableName)
}
#if LANG_CXX11
inline void SqlTableInfo::set_tablename(::std::string&& value) {
  
  tablename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArmyAntMessage.DBProxy.SqlTableInfo.tableName)
}
#endif
inline void SqlTableInfo::set_tablename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tablename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArmyAntMessage.DBProxy.SqlTableInfo.tableName)
}
inline void SqlTableInfo::set_tablename(const char* value, size_t size) {
  
  tablename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArmyAntMessage.DBProxy.SqlTableInfo.tableName)
}
inline ::std::string* SqlTableInfo::mutable_tablename() {
  
  // @@protoc_insertion_point(field_mutable:ArmyAntMessage.DBProxy.SqlTableInfo.tableName)
  return tablename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqlTableInfo::release_tablename() {
  // @@protoc_insertion_point(field_release:ArmyAntMessage.DBProxy.SqlTableInfo.tableName)
  
  return tablename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqlTableInfo::set_allocated_tablename(::std::string* tablename) {
  if (tablename != NULL) {
    
  } else {
    
  }
  tablename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablename);
  // @@protoc_insertion_point(field_set_allocated:ArmyAntMessage.DBProxy.SqlTableInfo.tableName)
}

// string engine = 6;
inline void SqlTableInfo::clear_engine() {
  engine_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SqlTableInfo::engine() const {
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.SqlTableInfo.engine)
  return engine_.GetNoArena();
}
inline void SqlTableInfo::set_engine(const ::std::string& value) {
  
  engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArmyAntMessage.DBProxy.SqlTableInfo.engine)
}
#if LANG_CXX11
inline void SqlTableInfo::set_engine(::std::string&& value) {
  
  engine_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArmyAntMessage.DBProxy.SqlTableInfo.engine)
}
#endif
inline void SqlTableInfo::set_engine(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArmyAntMessage.DBProxy.SqlTableInfo.engine)
}
inline void SqlTableInfo::set_engine(const char* value, size_t size) {
  
  engine_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArmyAntMessage.DBProxy.SqlTableInfo.engine)
}
inline ::std::string* SqlTableInfo::mutable_engine() {
  
  // @@protoc_insertion_point(field_mutable:ArmyAntMessage.DBProxy.SqlTableInfo.engine)
  return engine_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqlTableInfo::release_engine() {
  // @@protoc_insertion_point(field_release:ArmyAntMessage.DBProxy.SqlTableInfo.engine)
  
  return engine_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqlTableInfo::set_allocated_engine(::std::string* engine) {
  if (engine != NULL) {
    
  } else {
    
  }
  engine_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), engine);
  // @@protoc_insertion_point(field_set_allocated:ArmyAntMessage.DBProxy.SqlTableInfo.engine)
}

// string comment = 7;
inline void SqlTableInfo::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SqlTableInfo::comment() const {
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.SqlTableInfo.comment)
  return comment_.GetNoArena();
}
inline void SqlTableInfo::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArmyAntMessage.DBProxy.SqlTableInfo.comment)
}
#if LANG_CXX11
inline void SqlTableInfo::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArmyAntMessage.DBProxy.SqlTableInfo.comment)
}
#endif
inline void SqlTableInfo::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArmyAntMessage.DBProxy.SqlTableInfo.comment)
}
inline void SqlTableInfo::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArmyAntMessage.DBProxy.SqlTableInfo.comment)
}
inline ::std::string* SqlTableInfo::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:ArmyAntMessage.DBProxy.SqlTableInfo.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SqlTableInfo::release_comment() {
  // @@protoc_insertion_point(field_release:ArmyAntMessage.DBProxy.SqlTableInfo.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SqlTableInfo::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:ArmyAntMessage.DBProxy.SqlTableInfo.comment)
}

// .ArmyAntMessage.DBProxy.SqlDatabaseInfo database = 8;
inline bool SqlTableInfo::has_database() const {
  return this != internal_default_instance() && database_ != NULL;
}
inline void SqlTableInfo::clear_database() {
  if (GetArenaNoVirtual() == NULL && database_ != NULL) {
    delete database_;
  }
  database_ = NULL;
}
inline const ::ArmyAntMessage::DBProxy::SqlDatabaseInfo& SqlTableInfo::database() const {
  const ::ArmyAntMessage::DBProxy::SqlDatabaseInfo* p = database_;
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.SqlTableInfo.database)
  return p != NULL ? *p : *reinterpret_cast<const ::ArmyAntMessage::DBProxy::SqlDatabaseInfo*>(
      &::ArmyAntMessage::DBProxy::_SqlDatabaseInfo_default_instance_);
}
inline ::ArmyAntMessage::DBProxy::SqlDatabaseInfo* SqlTableInfo::release_database() {
  // @@protoc_insertion_point(field_release:ArmyAntMessage.DBProxy.SqlTableInfo.database)
  
  ::ArmyAntMessage::DBProxy::SqlDatabaseInfo* temp = database_;
  database_ = NULL;
  return temp;
}
inline ::ArmyAntMessage::DBProxy::SqlDatabaseInfo* SqlTableInfo::mutable_database() {
  
  if (database_ == NULL) {
    auto* p = CreateMaybeMessage<::ArmyAntMessage::DBProxy::SqlDatabaseInfo>(GetArenaNoVirtual());
    database_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ArmyAntMessage.DBProxy.SqlTableInfo.database)
  return database_;
}
inline void SqlTableInfo::set_allocated_database(::ArmyAntMessage::DBProxy::SqlDatabaseInfo* database) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete database_;
  }
  if (database) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      database = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, database, submessage_arena);
    }
    
  } else {
    
  }
  database_ = database;
  // @@protoc_insertion_point(field_set_allocated:ArmyAntMessage.DBProxy.SqlTableInfo.database)
}

// -------------------------------------------------------------------

// SqlResult

// .ArmyAntMessage.DBProxy.SqlTableInfo table = 1;
inline bool SqlResult::has_table() const {
  return this != internal_default_instance() && table_ != NULL;
}
inline void SqlResult::clear_table() {
  if (GetArenaNoVirtual() == NULL && table_ != NULL) {
    delete table_;
  }
  table_ = NULL;
}
inline const ::ArmyAntMessage::DBProxy::SqlTableInfo& SqlResult::table() const {
  const ::ArmyAntMessage::DBProxy::SqlTableInfo* p = table_;
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.SqlResult.table)
  return p != NULL ? *p : *reinterpret_cast<const ::ArmyAntMessage::DBProxy::SqlTableInfo*>(
      &::ArmyAntMessage::DBProxy::_SqlTableInfo_default_instance_);
}
inline ::ArmyAntMessage::DBProxy::SqlTableInfo* SqlResult::release_table() {
  // @@protoc_insertion_point(field_release:ArmyAntMessage.DBProxy.SqlResult.table)
  
  ::ArmyAntMessage::DBProxy::SqlTableInfo* temp = table_;
  table_ = NULL;
  return temp;
}
inline ::ArmyAntMessage::DBProxy::SqlTableInfo* SqlResult::mutable_table() {
  
  if (table_ == NULL) {
    auto* p = CreateMaybeMessage<::ArmyAntMessage::DBProxy::SqlTableInfo>(GetArenaNoVirtual());
    table_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ArmyAntMessage.DBProxy.SqlResult.table)
  return table_;
}
inline void SqlResult::set_allocated_table(::ArmyAntMessage::DBProxy::SqlTableInfo* table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_;
  }
  if (table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    
  } else {
    
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:ArmyAntMessage.DBProxy.SqlResult.table)
}

// repeated .ArmyAntMessage.DBProxy.SqlHeadOne heads = 2;
inline int SqlResult::heads_size() const {
  return heads_.size();
}
inline void SqlResult::clear_heads() {
  heads_.Clear();
}
inline ::ArmyAntMessage::DBProxy::SqlHeadOne* SqlResult::mutable_heads(int index) {
  // @@protoc_insertion_point(field_mutable:ArmyAntMessage.DBProxy.SqlResult.heads)
  return heads_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ArmyAntMessage::DBProxy::SqlHeadOne >*
SqlResult::mutable_heads() {
  // @@protoc_insertion_point(field_mutable_list:ArmyAntMessage.DBProxy.SqlResult.heads)
  return &heads_;
}
inline const ::ArmyAntMessage::DBProxy::SqlHeadOne& SqlResult::heads(int index) const {
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.SqlResult.heads)
  return heads_.Get(index);
}
inline ::ArmyAntMessage::DBProxy::SqlHeadOne* SqlResult::add_heads() {
  // @@protoc_insertion_point(field_add:ArmyAntMessage.DBProxy.SqlResult.heads)
  return heads_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ArmyAntMessage::DBProxy::SqlHeadOne >&
SqlResult::heads() const {
  // @@protoc_insertion_point(field_list:ArmyAntMessage.DBProxy.SqlResult.heads)
  return heads_;
}

// repeated .ArmyAntMessage.DBProxy.SqlRow rows = 3;
inline int SqlResult::rows_size() const {
  return rows_.size();
}
inline void SqlResult::clear_rows() {
  rows_.Clear();
}
inline ::ArmyAntMessage::DBProxy::SqlRow* SqlResult::mutable_rows(int index) {
  // @@protoc_insertion_point(field_mutable:ArmyAntMessage.DBProxy.SqlResult.rows)
  return rows_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ArmyAntMessage::DBProxy::SqlRow >*
SqlResult::mutable_rows() {
  // @@protoc_insertion_point(field_mutable_list:ArmyAntMessage.DBProxy.SqlResult.rows)
  return &rows_;
}
inline const ::ArmyAntMessage::DBProxy::SqlRow& SqlResult::rows(int index) const {
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.SqlResult.rows)
  return rows_.Get(index);
}
inline ::ArmyAntMessage::DBProxy::SqlRow* SqlResult::add_rows() {
  // @@protoc_insertion_point(field_add:ArmyAntMessage.DBProxy.SqlResult.rows)
  return rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ArmyAntMessage::DBProxy::SqlRow >&
SqlResult::rows() const {
  // @@protoc_insertion_point(field_list:ArmyAntMessage.DBProxy.SqlResult.rows)
  return rows_;
}

// -------------------------------------------------------------------

// Any2Dbp_SqlRequest

// int32 type = 1;
inline void Any2Dbp_SqlRequest::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Any2Dbp_SqlRequest::type() const {
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.Any2Dbp_SqlRequest.type)
  return type_;
}
inline void Any2Dbp_SqlRequest::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ArmyAntMessage.DBProxy.Any2Dbp_SqlRequest.type)
}

// string tableName = 2;
inline void Any2Dbp_SqlRequest::clear_tablename() {
  tablename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Any2Dbp_SqlRequest::tablename() const {
  // @@protoc_insertion_point(field_get:ArmyAntMessage.DBProxy.Any2Dbp_SqlRequest.tableName)
  return tablename_.GetNoArena();
}
inline void Any2Dbp_SqlRequest::set_tablename(const ::std::string& value) {
  
  tablename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ArmyAntMessage.DBProxy.Any2Dbp_SqlRequest.tableName)
}
#if LANG_CXX11
inline void Any2Dbp_SqlRequest::set_tablename(::std::string&& value) {
  
  tablename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ArmyAntMessage.DBProxy.Any2Dbp_SqlRequest.tableName)
}
#endif
inline void Any2Dbp_SqlRequest::set_tablename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tablename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ArmyAntMessage.DBProxy.Any2Dbp_SqlRequest.tableName)
}
inline void Any2Dbp_SqlRequest::set_tablename(const char* value, size_t size) {
  
  tablename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ArmyAntMessage.DBProxy.Any2Dbp_SqlRequest.tableName)
}
inline ::std::string* Any2Dbp_SqlRequest::mutable_tablename() {
  
  // @@protoc_insertion_point(field_mutable:ArmyAntMessage.DBProxy.Any2Dbp_SqlRequest.tableName)
  return tablename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Any2Dbp_SqlRequest::release_tablename() {
  // @@protoc_insertion_point(field_release:ArmyAntMessage.DBProxy.Any2Dbp_SqlRequest.tableName)
  
  return tablename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Any2Dbp_SqlRequest::set_allocated_tablename(::std::string* tablename) {
  if (tablename != NULL) {
    
  } else {
    
  }
  tablename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tablename);
  // @@protoc_insertion_point(field_set_allocated:ArmyAntMessage.DBProxy.Any2Dbp_SqlRequest.tableName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DBProxy
}  // namespace ArmyAntMessage

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ArmyAntMessage_2fDBProxy_2fSqlRequest_2eproto
