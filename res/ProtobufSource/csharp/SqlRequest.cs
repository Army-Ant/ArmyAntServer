// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ArmyAntMessage/DBProxy/SqlRequest.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ArmyAntMessage.DBProxy {

  /// <summary>Holder for reflection information generated from ArmyAntMessage/DBProxy/SqlRequest.proto</summary>
  public static partial class SqlRequestReflection {

    #region Descriptor
    /// <summary>File descriptor for ArmyAntMessage/DBProxy/SqlRequest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SqlRequestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CidBcm15QW50TWVzc2FnZS9EQlByb3h5L1NxbFJlcXVlc3QucHJvdG8SFkFy",
            "bXlBbnRNZXNzYWdlLkRCUHJveHkifAoKU3FsSGVhZE9uZRIOCgZsZW5ndGgY",
            "ASABKAUSEwoLY2F0YWxvZ05hbWUYAiABKAkSEgoKY29sdW1uTmFtZRgDIAEo",
            "CRIMCgR0eXBlGAQgASgFEhEKCWFsbG93TnVtbRgFIAEoCBIUCgxhdXRvSW5j",
            "cmVhc2UYBiABKAgiGAoGU3FsUm93Eg4KBmZpZWxkcxgBIAMoCSJSCg9TcWxE",
            "YXRhYmFzZUluZm8SDAoEbmFtZRgBIAEoCRIOCgZzZXJ2ZXIYAiABKAkSDwoH",
            "Y2hhcnNldBgDIAEoCRIQCghzb3J0UnVsZRgEIAEoCSJ9CgxTcWxUYWJsZUlu",
            "Zm8SEQoJdGFibGVOYW1lGAUgASgJEg4KBmVuZ2luZRgGIAEoCRIPCgdjb21t",
            "ZW50GAcgASgJEjkKCGRhdGFiYXNlGAggASgLMicuQXJteUFudE1lc3NhZ2Uu",
            "REJQcm94eS5TcWxEYXRhYmFzZUluZm8ioQEKCVNxbFJlc3VsdBIzCgV0YWJs",
            "ZRgBIAEoCzIkLkFybXlBbnRNZXNzYWdlLkRCUHJveHkuU3FsVGFibGVJbmZv",
            "EjEKBWhlYWRzGAIgAygLMiIuQXJteUFudE1lc3NhZ2UuREJQcm94eS5TcWxI",
            "ZWFkT25lEiwKBHJvd3MYAyADKAsyHi5Bcm15QW50TWVzc2FnZS5EQlByb3h5",
            "LlNxbFJvdyIiChJBbnkyRGJwX1NxbFJlcXVlc3QSDAoEdHlwZRgBIAEoBWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ArmyAntMessage.DBProxy.SqlHeadOne), global::ArmyAntMessage.DBProxy.SqlHeadOne.Parser, new[]{ "Length", "CatalogName", "ColumnName", "Type", "AllowNumm", "AutoIncrease" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArmyAntMessage.DBProxy.SqlRow), global::ArmyAntMessage.DBProxy.SqlRow.Parser, new[]{ "Fields" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArmyAntMessage.DBProxy.SqlDatabaseInfo), global::ArmyAntMessage.DBProxy.SqlDatabaseInfo.Parser, new[]{ "Name", "Server", "Charset", "SortRule" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArmyAntMessage.DBProxy.SqlTableInfo), global::ArmyAntMessage.DBProxy.SqlTableInfo.Parser, new[]{ "TableName", "Engine", "Comment", "Database" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArmyAntMessage.DBProxy.SqlResult), global::ArmyAntMessage.DBProxy.SqlResult.Parser, new[]{ "Table", "Heads", "Rows" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ArmyAntMessage.DBProxy.Any2Dbp_SqlRequest), global::ArmyAntMessage.DBProxy.Any2Dbp_SqlRequest.Parser, new[]{ "Type" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SqlHeadOne : pb::IMessage<SqlHeadOne> {
    private static readonly pb::MessageParser<SqlHeadOne> _parser = new pb::MessageParser<SqlHeadOne>(() => new SqlHeadOne());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SqlHeadOne> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArmyAntMessage.DBProxy.SqlRequestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlHeadOne() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlHeadOne(SqlHeadOne other) : this() {
      length_ = other.length_;
      catalogName_ = other.catalogName_;
      columnName_ = other.columnName_;
      type_ = other.type_;
      allowNumm_ = other.allowNumm_;
      autoIncrease_ = other.autoIncrease_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlHeadOne Clone() {
      return new SqlHeadOne(this);
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 1;
    private int length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "catalogName" field.</summary>
    public const int CatalogNameFieldNumber = 2;
    private string catalogName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CatalogName {
      get { return catalogName_; }
      set {
        catalogName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "columnName" field.</summary>
    public const int ColumnNameFieldNumber = 3;
    private string columnName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ColumnName {
      get { return columnName_; }
      set {
        columnName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "allowNumm" field.</summary>
    public const int AllowNummFieldNumber = 5;
    private bool allowNumm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowNumm {
      get { return allowNumm_; }
      set {
        allowNumm_ = value;
      }
    }

    /// <summary>Field number for the "autoIncrease" field.</summary>
    public const int AutoIncreaseFieldNumber = 6;
    private bool autoIncrease_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoIncrease {
      get { return autoIncrease_; }
      set {
        autoIncrease_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SqlHeadOne);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SqlHeadOne other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Length != other.Length) return false;
      if (CatalogName != other.CatalogName) return false;
      if (ColumnName != other.ColumnName) return false;
      if (Type != other.Type) return false;
      if (AllowNumm != other.AllowNumm) return false;
      if (AutoIncrease != other.AutoIncrease) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Length != 0) hash ^= Length.GetHashCode();
      if (CatalogName.Length != 0) hash ^= CatalogName.GetHashCode();
      if (ColumnName.Length != 0) hash ^= ColumnName.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (AllowNumm != false) hash ^= AllowNumm.GetHashCode();
      if (AutoIncrease != false) hash ^= AutoIncrease.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Length != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Length);
      }
      if (CatalogName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CatalogName);
      }
      if (ColumnName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ColumnName);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (AllowNumm != false) {
        output.WriteRawTag(40);
        output.WriteBool(AllowNumm);
      }
      if (AutoIncrease != false) {
        output.WriteRawTag(48);
        output.WriteBool(AutoIncrease);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Length);
      }
      if (CatalogName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CatalogName);
      }
      if (ColumnName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ColumnName);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (AllowNumm != false) {
        size += 1 + 1;
      }
      if (AutoIncrease != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SqlHeadOne other) {
      if (other == null) {
        return;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
      if (other.CatalogName.Length != 0) {
        CatalogName = other.CatalogName;
      }
      if (other.ColumnName.Length != 0) {
        ColumnName = other.ColumnName;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.AllowNumm != false) {
        AllowNumm = other.AllowNumm;
      }
      if (other.AutoIncrease != false) {
        AutoIncrease = other.AutoIncrease;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Length = input.ReadInt32();
            break;
          }
          case 18: {
            CatalogName = input.ReadString();
            break;
          }
          case 26: {
            ColumnName = input.ReadString();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
          case 40: {
            AllowNumm = input.ReadBool();
            break;
          }
          case 48: {
            AutoIncrease = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SqlRow : pb::IMessage<SqlRow> {
    private static readonly pb::MessageParser<SqlRow> _parser = new pb::MessageParser<SqlRow>(() => new SqlRow());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SqlRow> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArmyAntMessage.DBProxy.SqlRequestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlRow() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlRow(SqlRow other) : this() {
      fields_ = other.fields_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlRow Clone() {
      return new SqlRow(this);
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_fields_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> fields_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Fields {
      get { return fields_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SqlRow);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SqlRow other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fields_.Equals(other.fields_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fields_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fields_.WriteTo(output, _repeated_fields_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fields_.CalculateSize(_repeated_fields_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SqlRow other) {
      if (other == null) {
        return;
      }
      fields_.Add(other.fields_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            fields_.AddEntriesFrom(input, _repeated_fields_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SqlDatabaseInfo : pb::IMessage<SqlDatabaseInfo> {
    private static readonly pb::MessageParser<SqlDatabaseInfo> _parser = new pb::MessageParser<SqlDatabaseInfo>(() => new SqlDatabaseInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SqlDatabaseInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArmyAntMessage.DBProxy.SqlRequestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlDatabaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlDatabaseInfo(SqlDatabaseInfo other) : this() {
      name_ = other.name_;
      server_ = other.server_;
      charset_ = other.charset_;
      sortRule_ = other.sortRule_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlDatabaseInfo Clone() {
      return new SqlDatabaseInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 2;
    private string server_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Server {
      get { return server_; }
      set {
        server_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "charset" field.</summary>
    public const int CharsetFieldNumber = 3;
    private string charset_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Charset {
      get { return charset_; }
      set {
        charset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sortRule" field.</summary>
    public const int SortRuleFieldNumber = 4;
    private string sortRule_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SortRule {
      get { return sortRule_; }
      set {
        sortRule_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SqlDatabaseInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SqlDatabaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Server != other.Server) return false;
      if (Charset != other.Charset) return false;
      if (SortRule != other.SortRule) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Server.Length != 0) hash ^= Server.GetHashCode();
      if (Charset.Length != 0) hash ^= Charset.GetHashCode();
      if (SortRule.Length != 0) hash ^= SortRule.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Server.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Server);
      }
      if (Charset.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Charset);
      }
      if (SortRule.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SortRule);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Server.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Server);
      }
      if (Charset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Charset);
      }
      if (SortRule.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SortRule);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SqlDatabaseInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Server.Length != 0) {
        Server = other.Server;
      }
      if (other.Charset.Length != 0) {
        Charset = other.Charset;
      }
      if (other.SortRule.Length != 0) {
        SortRule = other.SortRule;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Server = input.ReadString();
            break;
          }
          case 26: {
            Charset = input.ReadString();
            break;
          }
          case 34: {
            SortRule = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SqlTableInfo : pb::IMessage<SqlTableInfo> {
    private static readonly pb::MessageParser<SqlTableInfo> _parser = new pb::MessageParser<SqlTableInfo>(() => new SqlTableInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SqlTableInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArmyAntMessage.DBProxy.SqlRequestReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlTableInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlTableInfo(SqlTableInfo other) : this() {
      tableName_ = other.tableName_;
      engine_ = other.engine_;
      comment_ = other.comment_;
      Database = other.database_ != null ? other.Database.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlTableInfo Clone() {
      return new SqlTableInfo(this);
    }

    /// <summary>Field number for the "tableName" field.</summary>
    public const int TableNameFieldNumber = 5;
    private string tableName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableName {
      get { return tableName_; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 6;
    private string engine_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Engine {
      get { return engine_; }
      set {
        engine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 7;
    private string comment_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comment {
      get { return comment_; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "database" field.</summary>
    public const int DatabaseFieldNumber = 8;
    private global::ArmyAntMessage.DBProxy.SqlDatabaseInfo database_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ArmyAntMessage.DBProxy.SqlDatabaseInfo Database {
      get { return database_; }
      set {
        database_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SqlTableInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SqlTableInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableName != other.TableName) return false;
      if (Engine != other.Engine) return false;
      if (Comment != other.Comment) return false;
      if (!object.Equals(Database, other.Database)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TableName.Length != 0) hash ^= TableName.GetHashCode();
      if (Engine.Length != 0) hash ^= Engine.GetHashCode();
      if (Comment.Length != 0) hash ^= Comment.GetHashCode();
      if (database_ != null) hash ^= Database.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TableName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TableName);
      }
      if (Engine.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Engine);
      }
      if (Comment.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Comment);
      }
      if (database_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Database);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TableName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (Engine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Engine);
      }
      if (Comment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      if (database_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Database);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SqlTableInfo other) {
      if (other == null) {
        return;
      }
      if (other.TableName.Length != 0) {
        TableName = other.TableName;
      }
      if (other.Engine.Length != 0) {
        Engine = other.Engine;
      }
      if (other.Comment.Length != 0) {
        Comment = other.Comment;
      }
      if (other.database_ != null) {
        if (database_ == null) {
          database_ = new global::ArmyAntMessage.DBProxy.SqlDatabaseInfo();
        }
        Database.MergeFrom(other.Database);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 42: {
            TableName = input.ReadString();
            break;
          }
          case 50: {
            Engine = input.ReadString();
            break;
          }
          case 58: {
            Comment = input.ReadString();
            break;
          }
          case 66: {
            if (database_ == null) {
              database_ = new global::ArmyAntMessage.DBProxy.SqlDatabaseInfo();
            }
            input.ReadMessage(database_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SqlResult : pb::IMessage<SqlResult> {
    private static readonly pb::MessageParser<SqlResult> _parser = new pb::MessageParser<SqlResult>(() => new SqlResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SqlResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArmyAntMessage.DBProxy.SqlRequestReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlResult(SqlResult other) : this() {
      Table = other.table_ != null ? other.Table.Clone() : null;
      heads_ = other.heads_.Clone();
      rows_ = other.rows_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SqlResult Clone() {
      return new SqlResult(this);
    }

    /// <summary>Field number for the "table" field.</summary>
    public const int TableFieldNumber = 1;
    private global::ArmyAntMessage.DBProxy.SqlTableInfo table_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ArmyAntMessage.DBProxy.SqlTableInfo Table {
      get { return table_; }
      set {
        table_ = value;
      }
    }

    /// <summary>Field number for the "heads" field.</summary>
    public const int HeadsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::ArmyAntMessage.DBProxy.SqlHeadOne> _repeated_heads_codec
        = pb::FieldCodec.ForMessage(18, global::ArmyAntMessage.DBProxy.SqlHeadOne.Parser);
    private readonly pbc::RepeatedField<global::ArmyAntMessage.DBProxy.SqlHeadOne> heads_ = new pbc::RepeatedField<global::ArmyAntMessage.DBProxy.SqlHeadOne>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ArmyAntMessage.DBProxy.SqlHeadOne> Heads {
      get { return heads_; }
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::ArmyAntMessage.DBProxy.SqlRow> _repeated_rows_codec
        = pb::FieldCodec.ForMessage(26, global::ArmyAntMessage.DBProxy.SqlRow.Parser);
    private readonly pbc::RepeatedField<global::ArmyAntMessage.DBProxy.SqlRow> rows_ = new pbc::RepeatedField<global::ArmyAntMessage.DBProxy.SqlRow>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::ArmyAntMessage.DBProxy.SqlRow> Rows {
      get { return rows_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SqlResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SqlResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Table, other.Table)) return false;
      if(!heads_.Equals(other.heads_)) return false;
      if(!rows_.Equals(other.rows_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (table_ != null) hash ^= Table.GetHashCode();
      hash ^= heads_.GetHashCode();
      hash ^= rows_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (table_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Table);
      }
      heads_.WriteTo(output, _repeated_heads_codec);
      rows_.WriteTo(output, _repeated_rows_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (table_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Table);
      }
      size += heads_.CalculateSize(_repeated_heads_codec);
      size += rows_.CalculateSize(_repeated_rows_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SqlResult other) {
      if (other == null) {
        return;
      }
      if (other.table_ != null) {
        if (table_ == null) {
          table_ = new global::ArmyAntMessage.DBProxy.SqlTableInfo();
        }
        Table.MergeFrom(other.Table);
      }
      heads_.Add(other.heads_);
      rows_.Add(other.rows_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (table_ == null) {
              table_ = new global::ArmyAntMessage.DBProxy.SqlTableInfo();
            }
            input.ReadMessage(table_);
            break;
          }
          case 18: {
            heads_.AddEntriesFrom(input, _repeated_heads_codec);
            break;
          }
          case 26: {
            rows_.AddEntriesFrom(input, _repeated_rows_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Any2Dbp_SqlRequest : pb::IMessage<Any2Dbp_SqlRequest> {
    private static readonly pb::MessageParser<Any2Dbp_SqlRequest> _parser = new pb::MessageParser<Any2Dbp_SqlRequest>(() => new Any2Dbp_SqlRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Any2Dbp_SqlRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ArmyAntMessage.DBProxy.SqlRequestReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Any2Dbp_SqlRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Any2Dbp_SqlRequest(Any2Dbp_SqlRequest other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Any2Dbp_SqlRequest Clone() {
      return new Any2Dbp_SqlRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    /// 1: select, 2: update, 3: alter, 4: execute
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Any2Dbp_SqlRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Any2Dbp_SqlRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Any2Dbp_SqlRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
